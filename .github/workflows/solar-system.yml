name: Solar System Workflow

on: 
  workflow_dispatch:
    
  push:
    branches:
      - main
      - 'feature/*'
    
env:
   MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
   MONGO_USERNAME: ${{vars.MONGO_USERNAME}}

   MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image:  siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
             nodejs_version: [18, 20]
             os: [ubuntu-latest]
             exclude:
               - nodejs_version: 18
                 os: macos-latest
        runs-on: ${{matrix.os}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}
    
        - name: Install Dependencies
          run: npm install

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Unit Testing
          id: unit-data
          run: npm test
        
        - name: Archive Test Result
          if:   always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-test-result
            path: test-result.xml

            
    code-coverage:
      name: code-coverage
      services:
          mongo-db:
            image:  siddharth67/mongo-db:non-prod
            options: 
              --name mongo
      env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
      container: 
        image: node:18
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

       # - name: Setup NodeJS Version - 18
        #  uses: actions/setup-node@v3
        #  with:
        #    node-version: 18
        
        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{ hashFiles('package-lock.json') }}  

    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          continue-on-error: true
          run: npm test
        
        - name: check code coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5

   

    docker:
      name: conterization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions: 
        packages: write
      steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{vars.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}


      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}
      
      - name: Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
                ${{vars.DOCKER_USERNAME}}/solar-system:${{ github.sha }}
                
        
      - name: Docker Image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD  \
          ${{vars.DOCKER_USERNAME}}/solar-system:${{ github.sha }}
            
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app )
          echo $IP

    
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment: 
        name: development
      steps:
        - uses: actions/checkout@v4
        - uses: azure/setup-kubectl@v3
          with:
            version: v1.26.0
        - uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: '${{ secrets.KUBECONFIG }}'
        - run: kubectl version --short -o yaml
         
        - run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services
            ingress-nginx-controller -o
            jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
        - uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: '${{ vars.NAMESPACE }}'
            REPLICAS: '${{ vars.REPLICAS }}'
            IMAGE: >-
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha
              }}
            INGRESS_IP: '${{ env.INGRESS_IP }}'
        - run: cat kubernetes/development/*.yaml
  